-- ================================
-- üçï PIZZA SALES ANALYSIS QUERIES
-- ================================

-- ===============
-- ‚úÖ BASIC QUERIES
-- ===============

-- 1. Total number of orders placed
SELECT COUNT(DISTINCT order_id) AS total_orders
FROM orders;

-- 2. Total revenue generated from pizza sales
SELECT ROUND(SUM(od.quantity * p.price), 2) AS total_revenue
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id;

-- 3. Highest-priced pizza
SELECT pizza_id, price
FROM pizzas
ORDER BY price DESC
LIMIT 1;

-- 4. Most common pizza size ordered
SELECT p.size, COUNT(*) AS order_count
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
GROUP BY p.size
ORDER BY order_count DESC
LIMIT 1;

-- 5. Top 5 most ordered pizza types
SELECT pt.name, SUM(od.quantity) AS total_quantity
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.name
ORDER BY total_quantity DESC
LIMIT 5;


-- ==========================
-- üîÑ INTERMEDIATE QUERIES
-- ==========================

-- 1. Total quantity of each pizza category ordered
SELECT pt.category, SUM(od.quantity) AS total_quantity
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.category;

-- 2. Distribution of orders by hour of the day
SELECT EXTRACT(HOUR FROM time) AS order_hour, COUNT(*) AS order_count
FROM orders
GROUP BY order_hour
ORDER BY order_hour;

-- 3. Category-wise distribution of pizzas
SELECT pt.category, COUNT(DISTINCT p.pizza_id) AS total_pizzas
FROM pizzas p
JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.category;

-- 4. Average number of pizzas ordered per day
SELECT date, ROUND(AVG(quantity)) AS avg_pizzas_per_day
FROM (
  SELECT o.date, SUM(od.quantity) AS quantity
  FROM orders o
  JOIN order_details od ON o.order_id = od.order_id
  GROUP BY o.date
) subquery
GROUP BY date
ORDER BY date;

-- 5. Top 3 most ordered pizza types based on revenue
SELECT pt.name, ROUND(SUM(od.quantity * p.price), 2) AS revenue
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.name
ORDER BY revenue DESC
LIMIT 3;


-- ============================
-- üìà ADVANCED QUERIES
-- ============================

-- 1. Percentage contribution of each pizza type to total revenue
SELECT pt.name,
       ROUND(SUM(od.quantity * p.price) * 100.0 / (
         SELECT SUM(od2.quantity * p2.price)
         FROM order_details od2
         JOIN pizzas p2 ON od2.pizza_id = p2.pizza_id
       ), 2) AS revenue_percentage
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.name
ORDER BY revenue_percentage DESC;

-- 2. Cumulative revenue generated over time
SELECT o.date,
       ROUND(SUM(od.quantity * p.price) OVER (ORDER BY o.date), 2) AS cumulative_revenue
FROM orders o
JOIN order_details od ON o.order_id = od.order_id
JOIN pizzas p ON od.pizza_id = p.pizza_id
GROUP BY o.date
ORDER BY o.date;

-- 3. Top 3 most ordered pizza types by revenue for each category
SELECT category, name, revenue
FROM (
  SELECT pt.category, pt.name,
         ROUND(SUM(od.quantity * p.price), 2) AS revenue,
         RANK() OVER (PARTITION BY pt.category ORDER BY SUM(od.quantity * p.price) DESC) AS rank
  FROM order_details od
  JOIN pizzas p ON od.pizza_id = p.pizza_id
  JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
  GROUP BY pt.category, pt.name
) ranked
WHERE rank <= 3
ORDER BY category, revenue DESC;



