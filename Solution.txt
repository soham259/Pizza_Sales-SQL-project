-- ================================
-- üçï PIZZA SALES ANALYSIS QUERIES
-- ================================

-- ===============
-- ‚úÖ BASIC QUERIES
-- ===============

-- 1. Total number of orders placed
SELECT COUNT(DISTINCT order_id) AS total_orders
FROM orders;

-- 2. Total revenue generated from pizza sales
SELECT ROUND(SUM(pizzas.price * order_details.quantity), 0) AS total_revenue
FROM order_details
JOIN pizzas ON pizzas.pizza_id = order_details.pizza_id;

-- 3. Highest-priced pizza
SELECT pizza_types.name, pizzas.price
FROM pizzas
JOIN pizza_types ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY price DESC
LIMIT 1;

-- 4. Most common pizza size ordered
SELECT p.size, COUNT(*) AS order_count
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
GROUP BY p.size
ORDER BY order_count DESC
LIMIT 1;

-- 5. Top 5 most ordered pizza types
SELECT COUNT(order_details.quantity) AS total, pizza_types.name
FROM order_details
JOIN pizzas ON order_details.pizza_id = pizzas.pizza_id
JOIN pizza_types ON pizza_types.pizza_type_id = pizzas.pizza_type_id
GROUP BY pizza_types.name
ORDER BY total DESC
LIMIT 5;


-- ==========================
-- üîÑ INTERMEDIATE QUERIES
-- ==========================

-- 1. Total quantity of each pizza category ordered
SELECT pt.category, SUM(od.quantity) AS total_quantity
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.category;

-- 2. Distribution of orders by hour of the day
SELECT COUNT(order_details.quantity) AS count_pizzas, HOUR(orders.order_time) AS time
FROM order_details
JOIN orders ON order_details.order_id = orders.order_id
GROUP BY HOUR(orders.order_time);

-- 3. Category-wise distribution of pizzas
SELECT COUNT(pizza_types.name), pizza_types.category
FROM pizza_types
GROUP BY pizza_types.category;

-- 4. Average number of pizzas ordered per day
SELECT AVG(quantity) FROM (
  SELECT orders.order_date, SUM(order_details.quantity) AS quantity
  FROM orders
  JOIN order_details ON orders.order_id = order_details.order_id
  GROUP BY orders.order_date
) AS avg_quantity;

-- 5. Top 3 most ordered pizza types based on revenue
SELECT SUM(pizzas.price * order_details.quantity) AS price, pizza_types.name
FROM pizzas
JOIN pizza_types ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizza_types.name
ORDER BY price DESC
LIMIT 3;


-- ============================
-- üìà ADVANCED QUERIES
-- ============================

-- 1. Percentage contribution of each pizza type to total revenue
SELECT pizza_types.category,
       (SUM(order_details.quantity * pizzas.price) / (
           SELECT SUM(order_details.quantity * pizzas.price)
           FROM order_details
           JOIN pizzas ON order_details.pizza_id = pizzas.pizza_id
       )) * 100 AS percentage
FROM pizza_types
JOIN pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
JOIN order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category;

-- 2. Cumulative revenue generated over time
SELECT order_date, SUM(revenue) OVER (ORDER BY order_date) AS cumulative
FROM (
  SELECT orders.order_date, SUM(order_details.quantity * pizzas.price) AS revenue
  FROM order_details
  JOIN pizzas ON pizzas.pizza_id = order_details.pizza_id
  JOIN orders ON order_details.order_id = orders.order_id
  GROUP BY orders.order_date
) AS ales;

-- 3. Top 3 most ordered pizza types by revenue for each category
SELECT category, name, revenue
FROM (
  SELECT pt.category, pt.name,
         ROUND(SUM(od.quantity * p.price), 2) AS revenue,
         RANK() OVER (PARTITION BY pt.category ORDER BY SUM(od.quantity * p.price) DESC) AS rank
  FROM order_details od
  JOIN pizzas p ON od.pizza_id = p.pizza_id
  JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
  GROUP BY pt.category, pt.name
) ranked
WHERE rank <= 3
ORDER BY category, revenue DESC;



